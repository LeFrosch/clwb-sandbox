#!/usr/bin/env python3

import sys
import os
import subprocess
import hashlib
import argparse


def container_derive_port(container_name):
    """Derives a stable port from the container name."""

    # use a part of the SHA256 hash to get a number
    hash_object = hashlib.sha256(container_name.encode())
    hex_dig = hash_object.hexdigest()

    # take the first 8 characters of the hash and convert to an integer
    hash_int = int(hex_dig[:8], 16)

    # map the integer to a high port range to avoid conflicts
    port_range_start = 20000
    port_range_end = 60000
    port_range_size = port_range_end - port_range_start

    return port_range_start + (hash_int % port_range_size)


def container_find_id(container_name):
    """Checks if a container exists and returns its ID, otherwise returns None."""
    cmd = [
        'docker', 'ps', '-a',
        '--filter', f'name=^{container_name}$',
        '--format', '{{.ID}}'
    ]
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.stdout.strip() or None


def container_remove(container_name):
    """Stops and removes the specified container if it exists."""
    container_id = container_find_id(container_name)
    if not container_id:
        print(f"Container '{container_name}' not found. Nothing to remove.")
        return

    print(f"Removing container '{container_name}'...")
    cmd = ['docker', 'rm', '-f', container_name]
    subprocess.run(cmd, check=True, capture_output=True)
    print(f"Container '{container_name}' removed successfully.")


def container_print_info(name):
    port = container_derive_port(name)
    id = container_find_id(name)

    print(f'Docker container running: {id}')
    print(f'-> connect with ssh: ssh abc@localhost -p {port}')
    print(f"-> connect with rdp: rdp://abc@localhost:{port + 1}")
    print(f"-> intellij backend port: {port + 2}")


def container_create(name, workspace_dir, clwb_dir, image_name):
    """Creates and starts a new container on stable ports derived from its name."""
    port = container_derive_port(name)

    print(f"Starting new container '{name}'...")

    docker_command = [
        'docker', 'run', '-d',
        '-p', f'{port + 0}:22',
        '-p', f'{port + 1}:3389',
        '-p', f'{port + 2}:5991',
        '-v', f'{workspace_dir}:/config/workspace',
        '-v', f'{clwb_dir}:/config/clwb',
        '--name', name,
        '--security-opt', 'seccomp=unconfined',
        image_name
    ]
    subprocess.run(docker_command, check=True, capture_output=True)


def main():
    parser = argparse.ArgumentParser(
        description="Manage a Docker development container.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '--workspace',
        required=True,
        help="The local directory to mount into the container's /config/workspace."
    )
    parser.add_argument(
        '--clwb',
        required=True,
        help="The local directory to mount into the container's /config/clwb."
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--remove',
        action='store_true',
        help="Find and remove the container."
    )
    group.add_argument(
        '--recreate',
        action='store_true',
        help="Remove the container if it exists, then create a new one."
    )
    args = parser.parse_args()

    # Validate the directory paths
    if not os.path.isdir(args.workspace):
        print(f"Error: Directory '{args.workspace}' not found.")
        sys.exit(1)
    if not os.path.isdir(args.clwb):
        print(f"Error: Directory '{args.clwb}' not found.")
        sys.exit(1)

    workspace_dir = os.path.abspath(args.workspace)
    clwb_dir = os.path.abspath(args.clwb)
    container_name = f"bazel-{os.path.basename(workspace_dir)}"
    image_name = "isolation"  # The Docker image to use

    try:
        if args.remove:
            container_remove(container_name)
            return

        if args.recreate:
            container_remove(container_name)

        container_create(container_name, workspace_dir, clwb_dir, image_name)
        container_print_info(container_name)

    except FileNotFoundError:
        print("Error: 'docker' command not found. Is Docker installed and in your PATH?")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        error_message = e.stderr.decode().strip()
        print(f"An error occurred with Docker: {error_message}")
        sys.exit(1)


if __name__ == "__main__":
    main()
