#!/usr/bin/env python3

import sys
import os
import socket
import subprocess
import argparse


def find_free_port():
    """Finds and returns an available TCP port."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('localhost', 0))
        return s.getsockname()[1]


def get_container_id(container_name):
    """Checks if a container exists and returns its ID, otherwise returns None."""
    cmd = [
        'docker', 'ps', '-a',
        '--filter', f'name=^{container_name}$',
        '--format', '{{.ID}}'
    ]
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.stdout.strip() or None


def get_container_port(container_name):
    """Gets the host port mapped to the container's port 22."""
    cmd = ['docker', 'port', container_name, '22/tcp']
    result = subprocess.run(cmd, capture_output=True, text=True)
    mapping = result.stdout.strip()
    if ':' in mapping:
        return mapping.split(':')[-1]
    return None


def remove_container(container_name):
    """Stops and removes the specified container if it exists."""
    container_id = get_container_id(container_name)
    if not container_id:
        print(f"Container '{container_name}' not found. Nothing to remove.")
        return

    print(f"Removing container '{container_name}'...")
    cmd = ['docker', 'rm', '-f', container_name]
    subprocess.run(cmd, check=True, capture_output=True)
    print(f"Container '{container_name}' removed successfully.")


def create_container(container_name, target_dir, image_name):
    """Creates and starts a new container on a free port."""
    free_port = find_free_port()
    print(f"Starting new container '{container_name}'...")
    print(f"Mounting '{target_dir}' to /workspace...")
    docker_command = [
        'docker', 'run', '-d',
        '-p', f'{free_port}:22',
        '-v', f'{target_dir}:/workspace',
        '--name', container_name,
        image_name
    ]
    subprocess.run(docker_command, check=True, capture_output=True)
    print(
        f"Container started. Connect with: ssh root@localhost -p {free_port}")


def main():
    parser = argparse.ArgumentParser(
        description="Manage a Docker development container.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        'workspace_path',
        help="The local directory to mount into the container's /workspace."
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--remove',
        action='store_true',
        help="Find and remove the container."
    )
    group.add_argument(
        '--recreate',
        action='store_true',
        help="Remove the container if it exists, then create a new one."
    )
    args = parser.parse_args()

    # Validate the directory path
    if not os.path.isdir(args.workspace_path):
        print(f"Error: Directory '{args.workspace_path}' not found.")
        sys.exit(1)

    target_dir = os.path.abspath(args.workspace_path)
    container_name = f"bazel-{os.path.basename(target_dir)}"
    image_name = "isolation"  # The Docker image to use

    try:
        if args.remove:
            remove_container(container_name)
        elif args.recreate:
            remove_container(container_name)
            create_container(container_name, target_dir, image_name)
        else:
            # Default behavior: start if not present, otherwise show status
            container_id = get_container_id(container_name)
            if container_id:
                print(f"Container '{container_name}' already exists.")
                host_port = get_container_port(container_name)
                if host_port:
                    print(f"Connect with: ssh root@localhost -p {host_port}")
                else:
                    print(f"Warning: Could not determine port for container '{container_name}'.")
                    print(f"Is it running? Try starting it with 'docker start {container_name}'")
            else:
                create_container(container_name, target_dir, image_name)

    except FileNotFoundError:
        print("Error: 'docker' command not found. Is Docker installed and in your PATH?")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        error_message = e.stderr.decode().strip()
        print(f"An error occurred with Docker: {error_message}")
        sys.exit(1)


if __name__ == "__main__":
    main()
